<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd" >
<generatorConfiguration>
	<!-- 引入配置文件 -->
	<properties resource="generator/init.properties"/>

	<!-- 指定数据连接驱动jar地址 -->
	<classPathEntry location="${classPath}" />

	<!-- 一个数据库一个context -->
	<context id="infoGuardian">

		<!--
			自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；
	        一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖
	     -->
	    <property name="autoDelimitKeywords" value="false"/>
	    <!-- 生成的Java文件的编码 -->
	    <property name="javaFileEncoding" value="UTF-8"/>
	    <!-- 格式化java代码 -->
	    <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
	    <!-- 格式化XML代码 -->
	    <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>

		<!-- 为生成的实体类添加equals，hashCode方法 -->
    	<!-- <plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin" /> -->
    	<!-- 为生成的实体类添加toString方法 -->
    	<!-- <plugin type="org.mybatis.generator.plugins.ToStringPlugin" /> -->



		<!-- 注释 -->
		<commentGenerator >
			<property name="suppressAllComments" value="false"/><!-- 是否取消注释 -->
			<property name="addRemarkComments" value="true" />
			<property name="suppressDate" value="true" /> <!-- 是否生成注释代时间戳-->
		</commentGenerator>

		<!-- jdbc连接 -->
		<jdbcConnection driverClass="${jdbc_driver}" connectionURL="${jdbc_url}" userId="${jdbc_user}" password="${jdbc_password}" />


		<!--
            true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型
            false：默认,
                scale>0;length>18：使用BigDecimal;
                scale=0;length[10,18]：使用Long；
                scale=0;length[5,9]：使用Integer；
                scale=0;length<5：使用Short；
         -->
		<!-- 类型转换 -->
		<javaTypeResolver>
			<property name="forceBigDecimals" value="false"/>
		</javaTypeResolver>

		<!-- 生成实体类地址 -->
		<javaModelGenerator targetPackage="com.oop.eksp.user.model" targetProject="${project}" >
			<!-- 是否  自动为每一个生成的类创建一个构造方法-->
			<property name="constructorBased" value="false"/>
			<property name="useActualColumnNames" value="true" />
			<!-- 是否在当前路径下新加一层schema,eg：fase路径com.oop.eksp.user.model， true:com.oop.eksp.user.model.[schemaName] -->
			<property name="enableSubPackages" value="false"/>
			<!-- 是否针对string类型的字段在set的时候进行trim调用 -->
			<property name="trimStrings" value="true"/>
		</javaModelGenerator>

		<!-- 生成mapxml文件 -->
		<sqlMapGenerator targetPackage="com.oop.eksp.user.data" targetProject="${project}" >
			<!-- 是否在当前路径下新加一层schema,eg：fase路径com.oop.eksp.user.model， true:com.oop.eksp.user.model.[schemaName] -->
			<property name="enableSubPackages" value="false" />
		</sqlMapGenerator>

		<!-- 生成mapxml对应client，也就是接口dao -->
		<javaClientGenerator targetPackage="com.oop.eksp.user.data" targetProject="${project}" type="XMLMAPPER" >
			<!-- 是否在当前路径下新加一层schema,eg：fase路径com.oop.eksp.user.model， true:com.oop.eksp.user.model.[schemaName] -->
			<property name="enableSubPackages" value="false" />
		</javaClientGenerator>

		<!-- 配置表信息 -->
		<table schema="${jdbc_user}" tableName="t_user"
			domainObjectName="UserEntity" enableCountByExample="false"
			enableDeleteByExample="false" enableSelectByExample="false"
			enableUpdateByExample="false">
			<!-- schema即为数据库名 tableName为对应的数据库表 domainObjectName是要生成的实体类 enable*ByExample 是否生成 example类   -->

			<!-- 忽略列，不生成bean 字段 -->
			<!-- <ignoreColumn column="FRED" /> -->
			<!-- 指定列的java数据类型 -->
	      	<!-- <columnOverride column="LONG_VARCHAR_FIELD" jdbcType="VARCHAR" /> -->
		</table>

	</context>
</generatorConfiguration>